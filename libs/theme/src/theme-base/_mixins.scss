@use "sass:color";
@use "sass:list";
@use "../datev-theme/variables/form";
@use "../datev-theme/variables/general";
@use "../datev-theme/variables/menu";

@mixin icon-override($icon) {
	&:before {
		content: $icon;
	}
}

@mixin focused() {
	outline: general.$focusOutline;
    outline-offset: general.$focusOutlineOffset;
    box-shadow: general.$focusShadow;
}

@mixin focused-inset() {
	outline: general.$focusOutline;
    outline-offset: -1 * general.$focusOutlineOffset;
    box-shadow: inset general.$focusShadow;
}

@mixin focused-input() {
	outline: general.$focusOutline;
    outline-offset: general.$inputFocusOutlineOffset;
    box-shadow: general.$focusShadow;
	border-color: form.$inputFocusBorderColor;
}

@mixin focused-listitem() {
	outline: general.$focusOutline;
    outline-offset: general.$focusOutlineOffset;
    box-shadow: form.$inputListItemFocusShadow;
}

@mixin invalid-input() {
	border-color: form.$inputErrorBorderColor;
}

@mixin menuitem {
    margin: form.$inputListItemMargin;

    &:first-child {
        margin-top: 0;
    }

    &:last-child {
        margin-bottom: 0;
    }
    
    > .p-menuitem-content {
        color: menu.$menuitemTextColor;
        transition: general.$listItemTransition;
        border-radius: menu.$menuitemBorderRadius;

        .p-menuitem-link {
            color: menu.$menuitemTextColor;
            padding: menu.$menuitemPadding;
            user-select: none;

            .p-menuitem-text {
                color: menu.$menuitemTextColor;
            }
        
            .p-menuitem-icon {
                color: menu.$menuitemIconColor;
                margin-right: general.$inlineSpacing;
            }
            
            .p-submenu-icon {
                color: menu.$menuitemIconColor;
            }
        }
    }

    &.p-highlight {
        > .p-menuitem-content {
            color: menu.$menuitemTextActiveColor;
            background: menu.$menuitemActiveBg;

            .p-menuitem-link {
                .p-menuitem-text {
                    color: menu.$menuitemTextActiveColor;
                }

                .p-menuitem-icon, .p-submenu-icon {
                    color: menu.$menuitemIconActiveColor;
                }
            }
        }

        &.p-focus {
            > .p-menuitem-content {
                background: menu.$menuitemActiveFocusBg;
            }
        }
    }

    &:not(.p-highlight):not(.p-disabled) {
        &.p-focus {
            > .p-menuitem-content {
                color: menu.$menuitemTextHoverColor;
                background: menu.$menuitemHoverBg;
    
                .p-menuitem-link {
                    .p-menuitem-text {
                        color: menu.$menuitemTextHoverColor;
                    }
                
                    .p-menuitem-icon, .p-submenu-icon {
                        color: menu.$menuitemTextHoverColor;
                    }
                }

                &:hover {
                    color: menu.$menuitemTextHoverColor;
                    background: menu.$menuitemHoverBg;
        
                    .p-menuitem-link {
                        .p-menuitem-text {
                            color: menu.$menuitemTextHoverColor;
                        }
        
                        .p-menuitem-icon, .p-submenu-icon {
                            color: menu.$menuitemIconHoverColor;
                        }
                    }
                }
            }
        }

        > .p-menuitem-content {
            &:hover {
                color: menu.$menuitemTextHoverColor;
                background: menu.$menuitemHoverBg;
    
                .p-menuitem-link {
                    .p-menuitem-text {
                        color: menu.$menuitemTextHoverColor;
                    }
    
                    .p-menuitem-icon, .p-submenu-icon {
                        color: menu.$menuitemIconHoverColor;
                    }
                }
            }
        }
    }
}

@mixin horizontal-rootmenuitem {
    > .p-menuitem-content {
        color: menu.$horizontalMenuRootMenuitemTextColor;
        transition: general.$listItemTransition;
        border-radius: menu.$horizontalMenuRootMenuitemBorderRadius;

        .p-menuitem-link {
            padding: menu.$horizontalMenuRootMenuitemPadding;
            user-select: none;

            .p-menuitem-text {
                color: menu.$horizontalMenuRootMenuitemTextColor;
            }
        
            .p-menuitem-icon {
                color: menu.$horizontalMenuRootMenuitemIconColor;
                margin-right: general.$inlineSpacing;
            }
            
            .p-submenu-icon {
                color: menu.$horizontalMenuRootMenuitemIconColor;
                margin-left: general.$inlineSpacing;
            }
        }
    }

    &:not(.p-highlight):not(.p-disabled) {
        > .p-menuitem-content {
            &:hover {
                color: menu.$horizontalMenuRootMenuitemTextHoverColor;
                background: menu.$horizontalMenuRootMenuitemHoverBg;
    
                .p-menuitem-link {
                    .p-menuitem-text {
                        color: menu.$horizontalMenuRootMenuitemTextHoverColor;
                    }
    
                    .p-menuitem-icon, .p-submenu-icon {
                        color: menu.$horizontalMenuRootMenuitemIconHoverColor;
                    }
                }
            }
        }
    }
}

@mixin placeholder {
	::-webkit-input-placeholder {
		@content
	}
	:-moz-placeholder {
		@content
	}
	::-moz-placeholder {
		@content
	}
	:-ms-input-placeholder {
		@content
	}
}

@mixin scaledPadding($val, $scale) {
    padding: list.nth($val, 1) * $scale list.nth($val, 2) * $scale;
}

@mixin scaledFontSize($val, $scale) {
    font-size: $val * $scale;
}

@mixin nested-submenu-indents($val, $index, $length) {
    .p-submenu-list {
        .p-menuitem {
            .p-menuitem-content {
                .p-menuitem-link {
                    padding-left: $val * ($index + 1);
                }
    
            }
            @if $index < $length {
                @include nested-submenu-indents($val, $index + 2, $length);
            }
        }
    }
}

@mixin action-icon($enabled: true) {
    width: general.$actionIconWidth;
    height: general.$actionIconHeight;
    color: general.$actionIconColor;
    border: general.$actionIconBorder;
    background: general.$actionIconBg;
    border-radius: general.$actionIconBorderRadius;
    transition: general.$actionIconTransition;
    outline-color: transparent;

    @if $enabled {
        &:enabled:hover {
            @include action-icon-hover();
        }
    } @else {
        &:hover {
            @include action-icon-hover();
        }
    }

    &:focus-visible {
        @include focused();
    }
}

@mixin action-icon-hover() {
    color: general.$actionIconHoverColor;
    border-color: general.$actionIconHoverBorderColor;
    background: general.$actionIconHoverBg;
}

@mixin button-states {
    // <button> and <a> tags support :enabled selector.

    &:enabled,
    &:not(button):not(a):not(.p-disabled) {
        @content;
    }
}

@function tint($color, $percentage) {
    @return color.mix(#fff, $color, $percentage);
}

@function shade($color, $percentage) {
    @return color.mix(#000, $color, $percentage);
}