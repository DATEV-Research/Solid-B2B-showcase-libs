@use "sass:meta";
@use "../../../datev-theme/variables/button";
@use "../../../datev-theme/variables/general";
@use "../../mixins";

// core
.p-button {
    display: inline-flex;
    cursor: pointer;
    user-select: none;
    align-items: center;
    vertical-align: bottom;
    text-align: center;
    overflow: hidden;
    position: relative;
}

.p-button-label {
    flex: 1 1 auto;
}

.p-button-icon-right {
    order: 1;
}

.p-button:disabled {
    cursor: default;
}

.p-button-icon-only {
    justify-content: center;
}

.p-button-icon-only .p-button-label {
    visibility: hidden;
    width: 0;
    flex: 0 0 auto;
}

.p-button-vertical {
    flex-direction: column;
}

.p-button-icon-bottom {
    order: 2;
}

.p-button-group .p-button {
    margin: 0;
}

.p-button-group .p-button:not(:last-child), .p-button-group .p-button:not(:last-child):hover {
    border-right: 0 none;
}

.p-button-group .p-button:not(:first-of-type):not(:last-of-type) {
    border-radius: 0;
}

.p-button-group .p-button:first-of-type:not(:only-of-type) {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.p-button-group .p-button:last-of-type:not(:only-of-type) {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0;
}

.p-button-group .p-button:focus {
    position: relative;
    z-index: 1;
}

// theme
.p-button {
    color: button.$buttonTextColor;
    background: button.$buttonBg;
    border: 0;
    padding: button.$buttonPadding;
    font-size: general.$fontSize;
    transition: general.$formElementTransition;
    border-radius: general.$borderRadius;
    &:not(:disabled){
        outline: button.$buttonBorder;
    }

    &:not(:disabled):hover {
        background: button.$buttonHoverBg;
        color: button.$buttonTextHoverColor;
        outline-color: button.$buttonHoverBorderColor;
    }

    &:not(:disabled):active {
        background: button.$buttonActiveBg;
        color: button.$buttonTextActiveColor;
        outline-color: button.$buttonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$buttonBg;

        &:not(:disabled):hover {
            background: rgba(button.$buttonBg, button.$textButtonHoverBgOpacity);
            color: button.$buttonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$buttonBg, button.$textButtonActiveBgOpacity);
            color: button.$buttonBg;
            outline: button.$outlinedButtonBorder;
        }

        &.p-button-plain {
            color: button.$plainButtonTextColor;
            outline-color: button.$plainButtonTextColor;

            &:not(:disabled):hover {
                background: button.$plainButtonHoverBgColor;
                color: button.$plainButtonTextColor;
            }
    
            &:not(:disabled):active {
                background: button.$plainButtonActiveBgColor;
                color: button.$plainButtonTextColor;
            }
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$buttonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$buttonBg, button.$textButtonHoverBgOpacity);
            color: button.$buttonBg;
            outline-color: transparent;
        }

        &:not(:disabled):active {
            background: rgba(button.$buttonBg, button.$textButtonActiveBgOpacity);
            color: button.$buttonBg;
            outline-color: transparent;
        }

        &.p-button-plain {
            color: button.$plainButtonTextColor;

            &:not(:disabled):hover {
                background: button.$plainButtonHoverBgColor;
                color: button.$plainButtonTextColor;
            }
    
            &:not(:disabled):active {
                background: button.$plainButtonActiveBgColor;
                color: button.$plainButtonTextColor;
            }
        }
    }

    &:focus-visible {
        @include mixins.focused();
    }

    .p-button-label {
        transition-duration: general.$transitionDuration;
    }

    .p-button-icon-left {
         margin-right: general.$inlineSpacing;
    }

    .p-button-icon-right {
        margin-left: general.$inlineSpacing;
    }

    .p-button-icon-bottom {
        margin-top: general.$inlineSpacing;
    }

    .p-button-icon-top {
       margin-bottom: general.$inlineSpacing;
    }

    .p-badge {
        margin-left: general.$inlineSpacing;
        min-width: general.$fontSize;
        height: general.$fontSize;
        line-height: general.$fontSize;
        color: button.$buttonBg;
        background-color: button.$buttonTextColor;
    }

    &.p-button-raised {
        box-shadow: button.$raisedButtonShadow;
    }

    &.p-button-rounded {
        border-radius: button.$roundedButtonBorderRadius;
    }

    &.p-button-icon-only {
        width: button.$buttonIconOnlyWidth;
        padding: button.$buttonIconOnlyPadding;

        .p-button-icon-left,
        .p-button-icon-right {
            margin: 0;
        }

        &.p-button-rounded {
            border-radius: 50%;
            height: button.$buttonIconOnlyWidth;
        }
    }

    &.p-button-sm {
        @include mixins.scaledFontSize(general.$fontSize, general.$scaleSM);
        @include mixins.scaledPadding(button.$buttonPadding, general.$scaleSM);

        .p-button-icon {
            @include mixins.scaledFontSize(general.$primeIconFontSize, general.$scaleSM);
        }
    }

    &.p-button-lg {
        @include mixins.scaledFontSize(general.$fontSize, general.$scaleLG);
        @include mixins.scaledPadding(button.$buttonPadding, general.$scaleLG);

        .p-button-icon {
            @include mixins.scaledFontSize(general.$primeIconFontSize, general.$scaleLG);
        }
    }

    &.p-button-loading-label-only {
        .p-button-label {
            margin-left: general.$inlineSpacing;
        }

        .p-button-loading-icon {
            margin-right: 0;
        }
    }
}

.p-fluid {
    .p-button {
        width: 100%;
    }
    
    .p-button-icon-only {
        width: button.$buttonIconOnlyWidth;
    }

    .p-button-group {
        display: flex;
        
        .p-button {
            flex: 1;
        }
    }
}

.p-button.p-button-secondary, .p-button-group.p-button-secondary > .p-button, .p-splitbutton.p-button-secondary > .p-button {
    color: button.$secondaryButtonTextColor;
    background: button.$secondaryButtonBg;
    outline: button.$secondaryButtonBorder;

    &:not(:disabled):hover {
        background: button.$secondaryButtonHoverBg;
        color: button.$secondaryButtonTextHoverColor;
        outline-color: button.$secondaryButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$secondaryButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$secondaryButtonActiveBg;
        color: button.$secondaryButtonTextActiveColor;
        outline-color: button.$secondaryButtonActiveBorderColor;
    }
    
    &.p-button-outlined {
        background-color: transparent;
        color: button.$secondaryButtonBg;

        &:not(:disabled):hover {
            background: rgba(button.$secondaryButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$secondaryButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$secondaryButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$secondaryButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$secondaryButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$secondaryButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$secondaryButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$secondaryButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$secondaryButtonBg;
        }
    }
}

.p-button.p-button-info, .p-button-group.p-button-info > .p-button, .p-splitbutton.p-button-info > .p-button {
    color: button.$infoButtonTextColor;
    background: button.$infoButtonBg;
    outline: button.$infoButtonBorder;

    &:not(:disabled):hover {
        background: button.$infoButtonHoverBg;
        color: button.$infoButtonTextHoverColor;
        outline-color: button.$infoButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$infoButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$infoButtonActiveBg;
        color: button.$infoButtonTextActiveColor;
        outline-color: button.$infoButtonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$infoButtonBg;
        outline: button.$outlinedButtonBorder;

        &:not(:disabled):hover {
            background: rgba(button.$infoButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$infoButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$infoButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$infoButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$infoButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$infoButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$infoButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$infoButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$infoButtonBg;
        }
    }
}

.p-button.p-button-success, .p-button-group.p-button-success > .p-button, .p-splitbutton.p-button-success > .p-button {
    color: button.$successButtonTextColor;
    background: button.$successButtonBg;
    outline: button.$successButtonBorder;

    &:not(:disabled):hover {
        background: button.$successButtonHoverBg;
        color: button.$successButtonTextHoverColor;
        outline-color: button.$successButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$successButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$successButtonActiveBg;
        color: button.$successButtonTextActiveColor;
        outline-color: button.$successButtonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$successButtonBg;
        outline: button.$outlinedButtonBorder;

        &:not(:disabled):hover {
            background: rgba(button.$successButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$successButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$successButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$successButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$successButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$successButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$successButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$successButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$successButtonBg;
        }
    }
}

.p-button.p-button-warning, .p-button-group.p-button-warning > .p-button, .p-splitbutton.p-button-warning > .p-button {
    color: button.$warningButtonTextColor;
    background: button.$warningButtonBg;
    outline: button.$warningButtonBorder;
    
    &:not(:disabled):hover {
        background: button.$warningButtonHoverBg;
        color: button.$warningButtonTextHoverColor;
        outline-color: button.$warningButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$warningButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$warningButtonActiveBg;
        color: button.$warningButtonTextActiveColor;
        outline-color: button.$warningButtonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$warningButtonBg;
        outline: button.$outlinedButtonBorder;

        &:not(:disabled):hover {
            background: rgba(button.$warningButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$warningButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$warningButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$warningButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$warningButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$warningButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$warningButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$warningButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$warningButtonBg;
        }
    }
}

.p-button.p-button-help, .p-button-group.p-button-help > .p-button, .p-splitbutton.p-button-help > .p-button {
    color: button.$helpButtonTextColor;
    background: button.$helpButtonBg;
    outline: button.$helpButtonBorder;

    &:not(:disabled):hover {
        background: button.$helpButtonHoverBg;
        color: button.$helpButtonTextHoverColor;
        outline-color: button.$helpButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$helpButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$helpButtonActiveBg;
        color: button.$helpButtonTextActiveColor;
        outline-color: button.$helpButtonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$helpButtonBg;
        outline: button.$outlinedButtonBorder;

        &:not(:disabled):hover {
            background: rgba(button.$helpButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$helpButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$helpButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$helpButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$helpButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$helpButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$helpButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$helpButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$helpButtonBg;
        }
    }
}

.p-button.p-button-danger, .p-button-group.p-button-danger > .p-button, .p-splitbutton.p-button-danger > .p-button {
    color: button.$dangerButtonTextColor;
    background: button.$dangerButtonBg;
    outline: button.$dangerButtonBorder;

    &:not(:disabled):hover {
        background: button.$dangerButtonHoverBg;
        color: button.$dangerButtonTextHoverColor;
        outline-color: button.$dangerButtonHoverBorderColor;
    }

    &:not(:disabled):focus {
        box-shadow: button.$dangerButtonFocusShadow;
    }

    &:not(:disabled):active {
        background: button.$dangerButtonActiveBg;
        color: button.$dangerButtonTextActiveColor;
        outline-color: button.$dangerButtonActiveBorderColor;
    }

    &.p-button-outlined {
        background-color: transparent;
        color: button.$dangerButtonBg;
        outline: button.$outlinedButtonBorder;

        &:not(:disabled):hover {
            background: rgba(button.$dangerButtonBg, button.$textButtonHoverBgOpacity);
            color: button.$dangerButtonBg;
            outline: button.$outlinedButtonBorder;
        }

        &:not(:disabled):active {
            background: rgba(button.$dangerButtonBg, button.$textButtonActiveBgOpacity);
            color: button.$dangerButtonBg;
            outline: button.$outlinedButtonBorder;
        }
    }

    &.p-button-text {
        background-color: transparent;
        color: button.$dangerButtonBg;
        outline-color: transparent;

        &:not(:disabled):hover {
            background: rgba(button.$dangerButtonBg, button.$textButtonHoverBgOpacity);
            outline-color: transparent;
            color: button.$dangerButtonBg;
        }

        &:not(:disabled):active {
            background: rgba(button.$dangerButtonBg, button.$textButtonActiveBgOpacity);
            outline-color: transparent;
            color: button.$dangerButtonBg;
        }
    }
}

@if meta.variable-exists(contrastButtonTextColor) {
    .p-button.p-button-contrast, .p-button-group.p-button-contrast > .p-button, .p-splitbutton.p-button-contrast > .p-button {
        color: $contrastButtonTextColor;
        background: $contrastButtonBg;
        outline: $contrastButtonBorder;
    
        &:not(:disabled):hover {
            background: $contrastButtonHoverBg;
            color: $contrastButtonTextHoverColor;
            outline-color: $contrastButtonHoverBorderColor;
        }
    
        &:not(:disabled):focus {
            box-shadow: $contrastButtonFocusShadow;
        }
    
        &:not(:disabled):active {
            background: $contrastButtonActiveBg;
            color: $contrastButtonTextActiveColor;
            outline-color: $contrastButtonActiveBorderColor;
        }
    
        &.p-button-outlined {
            background-color: transparent;
            color: $contrastButtonBg;
            outline: button.$outlinedButtonBorder;
    
            &:not(:disabled):hover {
                background: rgba($contrastButtonBg, button.$textButtonHoverBgOpacity);
                color: $contrastButtonBg;
                outline: button.$outlinedButtonBorder;
            }
    
            &:not(:disabled):active {
                background: rgba($contrastButtonBg, button.$textButtonActiveBgOpacity);
                color: $contrastButtonBg;
                outline: button.$outlinedButtonBorder;
            }
        }
    
        &.p-button-text {
            background-color: transparent;
            color: $contrastButtonBg;
            outline-color: transparent;
    
            &:not(:disabled):hover {
                background: rgba($contrastButtonBg, button.$textButtonHoverBgOpacity);
                outline-color: transparent;
                color: $contrastButtonBg;
            }
    
            &:not(:disabled):active {
                background: rgba($contrastButtonBg, button.$textButtonActiveBgOpacity);
                outline-color: transparent;
                color: $contrastButtonBg;
            }
        }
    }
}

.p-button.p-button-link {
    color: button.$linkButtonColor;
    background: transparent;
    outline: transparent;

    &:not(:disabled):hover {
        background:  transparent;
        color: button.$linkButtonHoverColor;
        outline-color:  transparent;

        .p-button-label {
            text-decoration: button.$linkButtonTextHoverDecoration;
        }
    }

    &:not(:disabled):focus {
        background: transparent;
        box-shadow: button.$linkButtonFocusShadow;
        outline-color:  transparent;
    }

    &:not(:disabled):active {
        background:  transparent;
        color: button.$linkButtonColor;
        outline-color:  transparent;
    }
}
