@use "sass:list";
@use "../../../datev-theme/variables/button";
@use "../../../datev-theme/variables/form";
@use "../../../datev-theme/variables/general";
@use "../../../datev-theme/variables/menu";
@use "../../../datev-theme/variables/misc";
@use "../../mixins";

@use "sass:math";

// core
.p-autocomplete {
    display: inline-flex;
}

.p-autocomplete-loader {
    position: absolute;
    top: 50%;
    margin-top: -0.5rem;
}

.p-autocomplete-dd .p-autocomplete-input {
    flex: 1 1 auto;
    width: 1%;
}

.p-autocomplete-dd .p-autocomplete-input,
.p-autocomplete-dd .p-autocomplete-multiple-container {
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
}

.p-autocomplete-dd .p-autocomplete-dropdown {
    border-top-left-radius: 0;
    border-bottom-left-radius: 0px;
}

.p-autocomplete .p-autocomplete-panel {
    min-width: 100%;
}

.p-autocomplete-panel {
    position: absolute;
    overflow: auto;
    top: 0;
    left: 0;
}

.p-autocomplete-items {
    margin: 0;
    padding: 0;
    list-style-type: none;
}

.p-autocomplete-item {
    cursor: pointer;
    white-space: nowrap;
    position: relative;
    overflow: hidden;
}

.p-autocomplete-multiple-container {
    margin: 0;
    padding: 0;
    list-style-type: none;
    cursor: text;
    overflow: hidden;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

.p-autocomplete-token {
    cursor: default;
    display: inline-flex;
    align-items: center;
    flex: 0 0 auto;
}

.p-autocomplete-token-icon {
    cursor: pointer;
}

.p-autocomplete-input-token {
    flex: 1 1 auto;
    display: inline-flex;
}

.p-autocomplete-input-token input {
    border: 0 none;
    outline: 0 none;
    background-color: transparent;
    margin: 0;
    padding: 0;
    box-shadow: none;
    border-radius: 0;
    width: 100%;
}

.p-fluid .p-autocomplete {
    display: flex;
}

.p-fluid .p-autocomplete-dd .p-autocomplete-input {
    width: 1%;
}

// theme
.p-autocomplete {
    .p-autocomplete-loader {
        right: list.nth(form.$inputPadding, 2);
    }

    &.p-autocomplete-dd {
        .p-autocomplete-loader {
            right: list.nth(form.$inputPadding, 2) + button.$buttonIconOnlyWidth;
        }
    }

    &:not(.p-disabled):hover {
        .p-autocomplete-multiple-container {
            border-color: form.$inputHoverBorderColor;
        }
    }

    &:not(.p-disabled).p-focus {
        .p-autocomplete-multiple-container {
            @include mixins.focused-input();
        }
    }

    .p-autocomplete-multiple-container {
        padding: math.div(list.nth(form.$inputPadding, 1), 2) list.nth(form.$inputPadding, 2);
        gap: general.$inlineSpacing;
        outline-color: transparent;

        .p-autocomplete-input-token {
            padding: math.div(list.nth(form.$inputPadding, 1), 2) 0;

            input {
                font-family: var(--font-family);
                font-feature-settings: var(--font-feature-settings, normal);
                font-size: form.$inputTextFontSize;
                color: general.$textColor;
                padding: 0;
                margin: 0;
            }
        }

        .p-autocomplete-token {
            padding: math.div(list.nth(form.$inputPadding, 1), 2) list.nth(form.$inputPadding, 2);
            background: misc.$chipBg;
            color: misc.$chipTextColor;
            border-radius: misc.$chipBorderRadius;

            .p-autocomplete-token-icon {
                margin-left: general.$inlineSpacing;
            }

            &.p-focus {
                background: misc.$chipFocusBg;
                color: misc.$chipFocusTextColor;
            }
        }
    }

    &.p-invalid.p-component > .p-inputtext {
        @include mixins.invalid-input();
    }
}

.p-autocomplete-panel {
    background: form.$inputOverlayBg;
    color: form.$inputListTextColor;
    border: form.$inputOverlayBorder;
    border-radius: general.$borderRadius;
    box-shadow: form.$inputOverlayShadow;

    .p-autocomplete-items {
        padding: form.$inputListPadding;

        .p-autocomplete-item {
            margin: form.$inputListItemMargin;
            padding: form.$inputListItemPadding;
            border: form.$inputListItemBorder;
            color: form.$inputListItemTextColor;
            background: form.$inputListItemBg;
            transition: general.$listItemTransition;
            border-radius: form.$inputListItemBorderRadius;

            &:first-child {
                margin-top: 0;
            }

            &:last-child {
                margin-bottom: 0;
            }

            &.p-highlight {
                color: general.$highlightTextColor;
                background: general.$highlightBg;

                &.p-focus {
                    background: general.$highlightFocusBg;
                }
            }

            &:not(.p-highlight):not(.p-disabled) {
                &.p-focus {
                    color: form.$inputListItemTextHoverColor;
                    background: form.$inputListItemHoverBg;
                }
            }
        }

        .p-autocomplete-item-group {
            margin: menu.$submenuHeaderMargin;
            padding: menu.$submenuHeaderPadding;
            color: menu.$submenuHeaderTextColor;
            background: menu.$submenuHeaderBg;
            font-weight: menu.$submenuHeaderFontWeight;
        }
    }
}
